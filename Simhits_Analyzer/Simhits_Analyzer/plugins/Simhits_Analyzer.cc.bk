// -*- C++ -*-
//
// Package:    Simhits_Analyzer/Simhits_Analyzer
// Class:      Simhits_Analyzer
//
/**\class Simhits_Analyzer Simhits_Analyzer.cc Simhits_Analyzer/Simhits_Analyzer/plugins/Simhits_Analyzer.cc

 Description: Analyzer for Simi Hits of the Muon System (needed to check the migration to DD4Hep of the Muon Geometry)

 Implementation: Code made from Mon, 16 Nov 2020 to  
    
*/
//
// Original Author:  Sergio Lo Meo (sergio.lo.meo@cern.ch) 
//         Created:  Mon, 16 Nov 2020 14:03:21 GMT
//
//
// system include files
#include <memory>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <iomanip>
#include <math.h>
// fwcore include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/one/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
// geometry include files
#include "Geometry/Records/interface/MuonGeometryRecord.h"
#include "Geometry/Records/interface/GlobalTrackingGeometryRecord.h"
#include "Geometry/CommonDetUnit/interface/GeomDet.h"
#include "Geometry/DTGeometry/interface/DTGeometry.h"
#include "Geometry/CSCGeometry/interface/CSCGeometry.h"
#include "Geometry/RPCGeometry/interface/RPCGeometry.h"
#include "Geometry/RPCGeometry/interface/RPCGeomServ.h"
#include <Geometry/RPCGeometry/interface/RPCRoll.h>
#include "Geometry/GEMGeometry/interface/GEMGeometry.h"
#include "Geometry/GEMGeometry/interface/ME0Geometry.h"
#include <Geometry/CommonTopologies/interface/RectangularStripTopology.h>
#include <Geometry/CommonTopologies/interface/TrapezoidalStripTopology.h>
#include "Geometry/Records/interface/MuonGeometryRecord.h"
#include "Geometry/DTGeometry/interface/DTLayer.h"
#include "Geometry/DTGeometry/interface/DTSuperLayer.h"
#include <Geometry/CSCGeometry/interface/CSCLayer.h>
#include "Geometry/CommonDetUnit/interface/GlobalTrackingGeometry.h"
// data format include files
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/GeometrySurface/interface/Surface.h"
#include <DataFormats/GeometrySurface/interface/LocalError.h>
#include <DataFormats/GeometryVector/interface/LocalPoint.h>
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/DetId/interface/DetId.h"
#include "DataFormats/MuonDetId/interface/MuonSubdetId.h"
#include <DataFormats/MuonDetId/interface/RPCDetId.h>
#include <DataFormats/MuonDetId/interface/RPCCompDetId.h>
#include <DataFormats/MuonDetId/interface/CSCDetId.h>
#include "DataFormats/MuonDetId/interface/DTWireId.h"
#include "DataFormats/MuonDetId/interface/DTLayerId.h"
#include "DataFormats/MuonDetId/interface/DTSuperLayerId.h"
#include "DataFormats/MuonDetId/interface/DTChamberId.h"
#include <DataFormats/MuonDetId/interface/GEMDetId.h>
#include <DataFormats/MuonDetId/interface/ME0DetId.h>
#include "DataFormats/RPCDigi/interface/RPCDigi.h"
#include "DataFormats/RPCDigi/interface/RPCDigiCollection.h"
#include <DataFormats/RPCRecHit/interface/RPCRecHit.h>
#include "DataFormats/RPCRecHit/interface/RPCRecHitCollection.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/Candidate/interface/CandMatchMap.h"
#include "DataFormats/Candidate/interface/CandidateFwd.h"
#include "DataFormats/TrajectorySeed/interface/TrajectorySeedCollection.h"
#include "DataFormats/Math/interface/LorentzVectorFwd.h"
#include "DataFormats/TrackCandidate/interface/TrackCandidate.h"
#include "DataFormats/Common/interface/Ref.h"
#include "DataFormats/GeometryVector/interface/GlobalPoint.h"
#include "DataFormats/DTRecHit/interface/DTSLRecSegment2D.h"
#include "DataFormats/MuonReco/interface/MuonCocktails.h"
#include "DataFormats/MuonReco/interface/MuonTimeExtra.h"
#include "DataFormats/MuonReco/interface/MuonTimeExtraMap.h"
#include <DataFormats/CSCRecHit/interface/CSCRecHit2D.h>
#include <DataFormats/CSCRecHit/interface/CSCRangeMapAccessor.h>
#include "DataFormats/TrackingRecHit/interface/TrackingRecHitFwd.h"
#include "DataFormats/TrackReco/interface/TrackExtra.h"
#include "DataFormats/PatCandidates/interface/PackedGenParticle.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/PatCandidates/interface/Muon.h"
#include "DataFormats/PatCandidates/interface/PackedCandidate.h"
#include "DataFormats/PatCandidates/interface/Jet.h"
#include "DataFormats/PatCandidates/interface/TriggerObjectStandAlone.h"
#include "DataFormats/TrackingRecHit/interface/TrackingRecHit.h"
#include "DataFormats/Math/interface/deltaR.h"
#include "DataFormats/Math/interface/deltaPhi.h"
// sim data format include files
#include "SimDataFormats/Track/interface/SimTrack.h"
#include "SimDataFormats/Track/interface/SimTrackContainer.h"
#include "SimDataFormats/Vertex/interface/SimVertex.h"
#include "SimDataFormats/Vertex/interface/SimVertexContainer.h"
#include "SimDataFormats/TrackingHit/interface/PSimHitContainer.h"
// tracking tool include files
#include "TrackingTools/TransientTrack/interface/TransientTrack.h"
#include "TrackingTools/GeomPropagators/interface/Propagator.h"
#include "TrackingTools/GeomPropagators/interface/AnalyticalPropagator.h"
#include "TrackPropagation/SteppingHelixPropagator/interface/SteppingHelixPropagator.h"
#include "TrackingTools/Records/interface/TrackingComponentsRecord.h"
#include "TrackingTools/PatternTools/interface/Trajectory.h"
#include "TrackingTools/PatternTools/interface/TrajTrackAssociation.h"
#include "TrackingTools/Records/interface/TransientTrackRecord.h"
#include "TrackingTools/TransientTrack/interface/TransientTrack.h"
#include "TrackingTools/TransientTrack/interface/TransientTrackBuilder.h"
// reco include files
#include "RecoMuon/TrackingTools/interface/MuonPatternRecoDumper.h"
#include "RecoMuon/TrackingTools/interface/MuonServiceProxy.h"
#include "RecoLocalMuon/DTSegment/src/DTSegmentUpdator.h"
#include "RecoLocalMuon/DTSegment/src/DTSegmentCleaner.h"
#include "RecoLocalMuon/DTSegment/src/DTHitPairForFit.h"
#include "RecoLocalMuon/DTSegment/src/DTSegmentCand.h"
#include "RecoVertex/KalmanVertexFit/interface/KalmanVertexFitter.h"
// common tools include files
#include "CommonTools/UtilAlgos/interface/TFileService.h"
// root include files
#include "TTree.h"
#include "TH1.h"
#include "TH2F.h"
#include "TCanvas.h"
#include <TRandom.h>
#include "TROOT.h"
#include "TStyle.h"
#include "TFile.h"
#include "TH1F.h"
#include "THStack.h"
#include "TLegend.h"
#include "TTree.h"
#include "TDirectoryFile.h"
#include "TGraph.h"
#include "TGraphErrors.h"
#include "TGraphAsymmErrors.h"
#include "TLatex.h"
#include "TNtuple.h"
#include "TNtupleD.h"
#include <TSystem.h>
#include <TStyle.h>
#include <TFrame.h>
#include "TLorentzVector.h"
#include "TMath.h"

//
// class declaration
//

class Simhits_Analyzer : public edm::one::EDAnalyzer<edm::one::SharedResources> {
public:
  explicit Simhits_Analyzer(const edm::ParameterSet&);
  ~Simhits_Analyzer();

  static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

private:
  void beginJob() override;
  void analyze(const edm::Event&, const edm::EventSetup&) override;
  void endJob() override;

  // Member Data

  // DT------------------------------
  // only mu- mu+
  TH1F* Z_DTHits_Muon;
  TH2F* XY_DTHits_Muon;
  TH2F* ZR_DTHits_Muon;
  TH2F* Wheel_Minus2_XY_DTHits_Muon;
  TH2F* Wheel_Minus1_XY_DTHits_Muon;
  TH2F* Wheel_0_XY_DTHits_Muon;
  TH2F* Wheel_1_XY_DTHits_Muon;
  TH2F* Wheel_2_XY_DTHits_Muon;
  // all particles
  TH1F* Z_DTHits_AllParticles;
  TH2F* XY_DTHits_AllParticles;
  TH2F* ZR_DTHits_AllParticles;
  TH2F* Wheel_Minus2_XY_DTHits_AllParticles;
  TH2F* Wheel_Minus1_XY_DTHits_AllParticles;
  TH2F* Wheel_0_XY_DTHits_AllParticles;
  TH2F* Wheel_1_XY_DTHits_AllParticles;
  TH2F* Wheel_2_XY_DTHits_AllParticles;
  // RPC------------------------------
  // mu+ mu-
  TH1F* Z_RPCHits_Muon;
  TH2F* XY_RPCHits_Muon;
  TH2F* ZR_RPCHits_Muon;
  TH2F* Barrel_Wheel_Minus2_XY_RPCHits_Muon;
  TH2F* Barrel_Wheel_Minus1_XY_RPCHits_Muon;
  TH2F* Barrel_Wheel_0_XY_RPCHits_Muon;
  TH2F* Barrel_Wheel_1_XY_RPCHits_Muon;
  TH2F* Barrel_Wheel_2_XY_RPCHits_Muon;
  TH2F* Endcap_1_XY_RPCHits_Muon;
  TH2F* Endcap_1_Ring_1_XY_RPCHits_Muon;
  TH2F* Endcap_1_Ring_2_XY_RPCHits_Muon;
  TH2F* Endcap_1_Ring_3_XY_RPCHits_Muon;
  TH2F* Endcap_Minus1_XY_RPCHits_Muon;
  TH2F* Endcap_Minus1_Ring_1_XY_RPCHits_Muon;
  TH2F* Endcap_Minus1_Ring_2_XY_RPCHits_Muon;
  TH2F* Endcap_Minus1_Ring_3_XY_RPCHits_Muon;
  // all particles
  TH1F* Z_RPCHits_AllParticles;
  TH2F* XY_RPCHits_AllParticles;
  TH2F* ZR_RPCHits_AllParticles;
  TH2F* Barrel_Wheel_Minus2_XY_RPCHits_AllParticles;
  TH2F* Barrel_Wheel_Minus1_XY_RPCHits_AllParticles;
  TH2F* Barrel_Wheel_0_XY_RPCHits_AllParticles;
  TH2F* Barrel_Wheel_1_XY_RPCHits_AllParticles;
  TH2F* Barrel_Wheel_2_XY_RPCHits_AllParticles;
  TH2F* Endcap_1_XY_RPCHits_AllParticles;
  TH2F* Endcap_1_Ring_1_XY_RPCHits_AllParticles;
  TH2F* Endcap_1_Ring_2_XY_RPCHits_AllParticles;
  TH2F* Endcap_1_Ring_3_XY_RPCHits_AllParticles;
  TH2F* Endcap_Minus1_XY_RPCHits_AllParticles;
  TH2F* Endcap_Minus1_Ring_1_XY_RPCHits_AllParticles;
  TH2F* Endcap_Minus1_Ring_2_XY_RPCHits_AllParticles;
  TH2F* Endcap_Minus1_Ring_3_XY_RPCHits_AllParticles;
  // CSC ----------------------------
  // all particles
  TH1F* Z_CSCHits_AllParticles;
  TH2F* XY_CSCHits_AllParticles;
  TH2F* ZR_CSCHits_AllParticles;
  TH2F* Endcap_1_XY_CSCHits_AllParticles;
  TH2F* Endcap_2_XY_CSCHits_AllParticles;
  TH2F* Endcap_1_Ring_1_XY_CSCHits_AllParticles;
  TH2F* Endcap_1_Ring_2_XY_CSCHits_AllParticles;
  TH2F* Endcap_1_Ring_3_XY_CSCHits_AllParticles;
  TH2F* Endcap_1_Ring_4_XY_CSCHits_AllParticles;
  TH2F* Endcap_2_Ring_1_XY_CSCHits_AllParticles;
  TH2F* Endcap_2_Ring_2_XY_CSCHits_AllParticles;
  TH2F* Endcap_2_Ring_3_XY_CSCHits_AllParticles;
  TH2F* Endcap_2_Ring_4_XY_CSCHits_AllParticles;

  // muon
  TH1F* Z_CSCHits_Muon;
  TH2F* XY_CSCHits_Muon;
  TH2F* ZR_CSCHits_Muon;
  TH2F* Endcap_1_XY_CSCHits_Muon;
  TH2F* Endcap_2_XY_CSCHits_Muon;
  TH2F* Endcap_1_Ring_1_XY_CSCHits_Muon;
  TH2F* Endcap_1_Ring_2_XY_CSCHits_Muon;
  TH2F* Endcap_1_Ring_3_XY_CSCHits_Muon;
  TH2F* Endcap_1_Ring_4_XY_CSCHits_Muon;
  TH2F* Endcap_2_Ring_1_XY_CSCHits_Muon;
  TH2F* Endcap_2_Ring_2_XY_CSCHits_Muon;
  TH2F* Endcap_2_Ring_3_XY_CSCHits_Muon;
  TH2F* Endcap_2_Ring_4_XY_CSCHits_Muon;
 
  Long64_t run, event, lumi;

  // Particles
  edm::Handle<edm::View<reco::GenParticle> > particle;
  edm::EDGetTokenT<edm::View< reco::GenParticle > > particleToken;
 
  // DT
  edm::Handle<edm::PSimHitContainer> theDTSimHitHandle;
  edm::EDGetTokenT<edm::PSimHitContainer> theDTSimHitToken;
  // 

  // RPC
  edm::Handle<edm::PSimHitContainer> theRPCSimHitHandle;
  edm::EDGetTokenT<edm::PSimHitContainer> theRPCSimHitToken;
  // 

  // CSC
  edm::Handle<edm::PSimHitContainer> theCSCSimHitHandle;
  edm::EDGetTokenT<edm::PSimHitContainer> theCSCSimHitToken;
  // 

  // GEM
  edm::Handle<edm::PSimHitContainer> theGEMSimHitHandle;
  edm::EDGetTokenT<edm::PSimHitContainer> theGEMSimHitToken;
  // 

#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
  edm::ESGetToken<SetupData, SetupRecord> setupToken_;
#endif
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
Simhits_Analyzer::Simhits_Analyzer(const edm::ParameterSet& iConfig){

  consumesMany<edm::PSimHitContainer>();
  usesResource("TFileService");

  particleToken = consumes< edm::View < reco::GenParticle> >(edm::InputTag("genParticles"));
  theDTSimHitToken = consumes<edm::PSimHitContainer>(edm::InputTag("g4SimHits", "MuonDTHits", "SIM"));
  theRPCSimHitToken = consumes<edm::PSimHitContainer>(edm::InputTag("g4SimHits", "MuonRPCHits", "SIM"));
  theCSCSimHitToken = consumes<edm::PSimHitContainer>(edm::InputTag("g4SimHits", "MuonCSCHits", "SIM"));
  theGEMSimHitToken = consumes<edm::PSimHitContainer>(edm::InputTag("g4SimHits", "MuonGEMHits", "SIM"));

#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
  setupDataToken_ = esConsumes<SetupData, SetupRecord>();
#endif
 
}

Simhits_Analyzer::~Simhits_Analyzer() {
 
}

//
// member functions
//

// ------------ method called for each event  ------------
void Simhits_Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup) {
  using namespace edm;
  using namespace std;
  using namespace reco;

  run = iEvent.id().run();
  event = iEvent.id().event();
  lumi = iEvent.id().luminosityBlock();

  iEvent.getByToken(particleToken, particle);  
  
  std::vector<edm::Handle<edm::PSimHitContainer> > theSimHitContainers;
  iEvent.getManyByType(theSimHitContainers); 

  std::vector<PSimHit> theSimHits;
  for (int i = 0; i < int(theSimHitContainers.size()); ++i) {
    theSimHits.insert(theSimHits.end(),theSimHitContainers.at(i)->begin(),theSimHitContainers.at(i)->end());
  }
  // DT
  iEvent.getByToken(theDTSimHitToken, theDTSimHitHandle); 
  ESHandle<DTGeometry> dtGeometry;
  iSetup.get<MuonGeometryRecord>().get(dtGeometry); 
  const DTGeometry* dtgeo = dtGeometry.product(); 

  // RPC
  iEvent.getByToken(theRPCSimHitToken, theRPCSimHitHandle); 
  ESHandle<RPCGeometry> rpcGeometry;
  iSetup.get<MuonGeometryRecord>().get(rpcGeometry); 
  const RPCGeometry* rpcgeo = rpcGeometry.product(); 

  // CSC
  iEvent.getByToken(theCSCSimHitToken, theCSCSimHitHandle); 
  ESHandle<CSCGeometry> cscGeometry;
  iSetup.get<MuonGeometryRecord>().get(cscGeometry); 
  const CSCGeometry* cscgeo = cscGeometry.product(); 

  // GEM
  iEvent.getByToken(theGEMSimHitToken, theGEMSimHitHandle); 
  ESHandle<GEMGeometry> gemGeometry;
  iSetup.get<MuonGeometryRecord>().get(gemGeometry); 
  const GEMGeometry* gemgeo = gemGeometry.product(); 

  // SimiHits +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  for (std::vector<PSimHit>::const_iterator iHit = theSimHits.begin(); iHit != theSimHits.end(); ++iHit) {

     int pid            = (*iHit).particleType();
     DetId theDetUnitId((*iHit).detUnitId());
     DetId simdetid= DetId((*iHit).detUnitId());

     // DT Sim Hits ------------------------------------------------------------------
     if(simdetid.det()==DetId::Muon &&  simdetid.subdetId()== MuonSubdetId::DT){
     
     DTWireId wireId(theDetUnitId);

     GlobalPoint DTGlobalPoint = dtgeo->idToDet(wireId)->toGlobal((*iHit).localPosition());
     double DT_GlobalPoint_R = sqrt(pow(DTGlobalPoint.x(),2)+pow(DTGlobalPoint.y(),2));     

     DTLayerId myDTLayerId = wireId.layerId();
     DTSuperLayerId myDTSuperLayerId = myDTLayerId.superlayerId();
     DTChamberId myDTChamberId = myDTSuperLayerId.chamberId();
     // all particles
     Z_DTHits_AllParticles->Fill(DTGlobalPoint.z());
     XY_DTHits_AllParticles->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
     ZR_DTHits_AllParticles->Fill(DTGlobalPoint.z(),DT_GlobalPoint_R);
     if(myDTChamberId.wheel() == -2) Wheel_Minus2_XY_DTHits_AllParticles->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
     if(myDTChamberId.wheel() == -1) Wheel_Minus1_XY_DTHits_AllParticles->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
     if(myDTChamberId.wheel() == 0) Wheel_0_XY_DTHits_AllParticles->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
     if(myDTChamberId.wheel() == 1) Wheel_1_XY_DTHits_AllParticles->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
     if(myDTChamberId.wheel() == 2) Wheel_2_XY_DTHits_AllParticles->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());

     // only mu- mu+
     if((pid==13) || (pid==-13))
       {
	 /// DT GEOMETRY INFO
	 /// Wheel id from -2 to 2 
	 /// Station id from 1 to 4
	 /// SuperLayer Id from 0 to 3
	 /// Layer Id from 0 to 4 (lowest layer id 0 indicates a full SL)
	 /// Wire Id: lowest wire id (numbering starts from 1 or 2), highest wire id (chambers have 48 to 96 wires) 
	 ///Sectors are numbered from 1 to 12,
	 /// starting at phi=0 and increasing with phi.
	 /// In station 4, where the top and bottom setcors are made of two chambers,
	 /// two additional sector numbers are used, 13 (after sector 4, top)
	 /// and 14 (after sector 10, bottom).
	 // cout<<"PID: "<<pid<<" Muon Hit in: "<<endl;
	 //cout<<" Wheel Id: "<<myDTChamberId.wheel()<<" Station Id: "<<myDTChamberId.station()<<" Sector Id: "<<myDTChamberId.sector()<<endl;
	 //cout<<" SuperLayer Id: "<<myDTSuperLayerId.superlayer()<<" Layer Id: "<<myDTLayerId.layer()<<" Wire ID: "<<wireId.wire()<<endl;
	 //cout<<" R: "<<DT_GlobalPoint_R<<" x: "<<DTGlobalPoint.x()<<" y: "<<DTGlobalPoint.y()<<" z: "<<DTGlobalPoint.z()<<endl;

	 Z_DTHits_Muon->Fill(DTGlobalPoint.z());
	 XY_DTHits_Muon->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
	 ZR_DTHits_Muon->Fill(DTGlobalPoint.z(),DT_GlobalPoint_R);
	 if(myDTChamberId.wheel() == -2) Wheel_Minus2_XY_DTHits_Muon->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
	 if(myDTChamberId.wheel() == -1) Wheel_Minus1_XY_DTHits_Muon->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
	 if(myDTChamberId.wheel() == 0) Wheel_0_XY_DTHits_Muon->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
	 if(myDTChamberId.wheel() == 1) Wheel_1_XY_DTHits_Muon->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
	 if(myDTChamberId.wheel() == 2) Wheel_2_XY_DTHits_Muon->Fill(DTGlobalPoint.x(), DTGlobalPoint.y());
       } // end only mu- mu+

     }// end DT Sim Hits -------------------------------------------------------------

 // RPC Sim Hits ------------------------------------------------------------------
     if(simdetid.det()==DetId::Muon &&  simdetid.subdetId()== MuonSubdetId::RPC){
     
     RPCDetId rpcdetId(theDetUnitId);

     GlobalPoint RPCGlobalPoint = rpcgeo->idToDet(rpcdetId)->toGlobal((*iHit).localPosition());
     double RPC_GlobalPoint_R = sqrt(pow(RPCGlobalPoint.x(),2)+pow(RPCGlobalPoint.y(),2));
     Z_RPCHits_AllParticles->Fill(RPCGlobalPoint.z());
     XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());     
     ZR_RPCHits_AllParticles->Fill(RPCGlobalPoint.z(),RPC_GlobalPoint_R);

     if((rpcdetId.region() == 0) && (rpcdetId.ring() == -2)) Barrel_Wheel_Minus2_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == 0) && (rpcdetId.ring() == -1)) Barrel_Wheel_Minus1_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == 0) && (rpcdetId.ring() == 0)) Barrel_Wheel_0_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == 0) && (rpcdetId.ring() == 1)) Barrel_Wheel_1_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == 0) && (rpcdetId.ring() == 2)) Barrel_Wheel_2_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());

     if(rpcdetId.region() == 1) Endcap_1_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == 1) && (rpcdetId.ring() == 1)) Endcap_1_Ring_1_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == 1) && (rpcdetId.ring() == 2)) Endcap_1_Ring_2_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == 1) && (rpcdetId.ring() == 3)) Endcap_1_Ring_3_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     
     if(rpcdetId.region() == -1) Endcap_Minus1_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == -1) && (rpcdetId.ring() == 1)) Endcap_Minus1_Ring_1_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == -1) && (rpcdetId.ring() == 2)) Endcap_Minus1_Ring_2_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     if((rpcdetId.region() == -1) && (rpcdetId.ring() == 3)) Endcap_Minus1_Ring_3_XY_RPCHits_AllParticles->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
     
     // only mu- mu+
     if((pid==13) || (pid==-13))
       {
	 /// RPC GEOMETRY INFO
	 /// Region id: 0 for Barrel, +/-1 For +/- Endcap
	 /// Ring id: Wheel number in Barrel (from -2 to +2) Ring Number in Endcap (from 1 to 3)
	 /// Ring has a different meaning in Barrel and Endcap! In Barrel it is wheel, in Endcap
	 /// it is the physical ring located on a disk (a disk contains three rings). In Endcap
	 /// the ring is the group of chambers with same r (distance of beam axis) and increasing phi
	 // Station id : For Barrel: the four groups of chambers at same r (distance from beam axis) and increasing phi
	 ///             For Endcap: the three groups of chambers at same z (distance from interaction point), i.e. the disk
	 /// Sector id: the group of chambers at same phi (and increasing r)
	 /// Layer id: each station can have two layers of chambers: layer 1 is the inner chamber and layer 2 is the outer chamber (when present)
	 /// Only in Barrel: RB1 and RB2.
	 /// SubSector id : some sectors are divided along the phi direction in subsectors (from 1 to 4 in Barrel, from 1 to 6 in Endcap)
	 /// Roll id  (also known as eta partition): each chamber is divided along the strip direction in
	 /// two or three parts (rolls) for Barrel and two, three or four parts for endcap
	 /// Roll is defined in RPCDetId.h and not in RPCCompDetId
	 //cout<<"PID: "<<pid<<" Muon Hit in: "<<endl;
	 //cout<<" Region Id: "<<rpcdetId.region()<<" Ring Id: "<<rpcdetId.ring()<<" Roll ID: "<<rpcdetId.roll()<<endl;
	 //cout<<" R: "<<RPC_GlobalPoint_R<<" x: "<<RPCGlobalPoint.x()<<" y: "<<RPCGlobalPoint.y()<<" z: "<<RPCGlobalPoint.z()<<endl;
	 Z_RPCHits_Muon->Fill(RPCGlobalPoint.z());
	 XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 ZR_RPCHits_Muon->Fill(RPCGlobalPoint.z(),RPC_GlobalPoint_R);
	 
	 if((rpcdetId.region() == 0) && (rpcdetId.ring() == -2)) Barrel_Wheel_Minus2_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == 0) && (rpcdetId.ring() == -1)) Barrel_Wheel_Minus1_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == 0) && (rpcdetId.ring() == 0)) Barrel_Wheel_0_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == 0) && (rpcdetId.ring() == 1)) Barrel_Wheel_1_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == 0) && (rpcdetId.ring() == 2)) Barrel_Wheel_2_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());

	 if(rpcdetId.region() == 1) Endcap_1_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == 1) && (rpcdetId.ring() == 1)) Endcap_1_Ring_1_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == 1) && (rpcdetId.ring() == 2)) Endcap_1_Ring_2_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == 1) && (rpcdetId.ring() == 3)) Endcap_1_Ring_3_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());

	 if(rpcdetId.region() == -1) Endcap_Minus1_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == -1) && (rpcdetId.ring() == 1)) Endcap_Minus1_Ring_1_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == -1) && (rpcdetId.ring() == 2)) Endcap_Minus1_Ring_2_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 if((rpcdetId.region() == -1) && (rpcdetId.ring() == 3)) Endcap_Minus1_Ring_3_XY_RPCHits_Muon->Fill(RPCGlobalPoint.x(), RPCGlobalPoint.y());
	 
       } // end only mu- mu+
     
     }// end RPC Sim Hits -------------------------------------------------------------
    
     // CSC Sim Hits ------------------------------------------------------------------
     if(simdetid.det()==DetId::Muon &&  simdetid.subdetId()== MuonSubdetId::CSC){
       
       CSCDetId cscdetId(theDetUnitId);

       GlobalPoint CSCGlobalPoint = cscgeo->idToDet(cscdetId)->toGlobal((*iHit).localPosition());
       double CSC_GlobalPoint_R = sqrt(pow(CSCGlobalPoint.x(),2)+pow(CSCGlobalPoint.y(),2));
       Z_CSCHits_AllParticles->Fill(CSCGlobalPoint.z());
       XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());     
       ZR_CSCHits_AllParticles->Fill(CSCGlobalPoint.z(),CSC_GlobalPoint_R);
       if(cscdetId.endcap() == 1) Endcap_1_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());     
       if(cscdetId.endcap() == 2) Endcap_2_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());
       if((cscdetId.endcap() == 1) && (cscdetId.ring() == 1)) Endcap_1_Ring_1_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
       if((cscdetId.endcap() == 1) && (cscdetId.ring() == 2)) Endcap_1_Ring_2_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
       if((cscdetId.endcap() == 1) && (cscdetId.ring() == 3)) Endcap_1_Ring_3_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
       if((cscdetId.endcap() == 1) && (cscdetId.ring() == 4)) Endcap_1_Ring_4_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());
       if((cscdetId.endcap() == 2) && (cscdetId.ring() == 1)) Endcap_2_Ring_1_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
       if((cscdetId.endcap() == 2) && (cscdetId.ring() == 2)) Endcap_2_Ring_2_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
       if((cscdetId.endcap() == 2) && (cscdetId.ring() == 3)) Endcap_2_Ring_3_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
       if((cscdetId.endcap() == 2) && (cscdetId.ring() == 4)) Endcap_2_Ring_4_XY_CSCHits_AllParticles->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y()); 
      
       if((pid==13) || (pid==-13))
	 {
	   //Endcap label. 1=forward (+Z); 2=backward (-Z)
	   //Ring ID : from 1 to 4
	   //	   cout<<"PID: "<<pid<<" Muon Hit in: "<<endl;
	   // cout<<" Endcap Id: "<<cscdetId.endcap()<<" Station Id: "<<cscdetId.station()<<" Ring ID: "<<cscdetId.ring()<<endl;
	   //cout<<" Chamber Id: "<<cscdetId.chamber()<<" Layer Id: "<<cscdetId.layer()<<endl;
	   //cout<<" R: "<<CSC_GlobalPoint_R<<" x: "<<CSCGlobalPoint.x()<<" y: "<<CSCGlobalPoint.y()<<" z: "<<CSCGlobalPoint.z()<<endl;
	
	   Z_CSCHits_Muon->Fill(CSCGlobalPoint.z());
	   XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());     
	   ZR_CSCHits_Muon->Fill(CSCGlobalPoint.z(),CSC_GlobalPoint_R);
       
	   if(cscdetId.endcap() == 1) Endcap_1_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());     
	   if(cscdetId.endcap() == 2) Endcap_2_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());
	   if((cscdetId.endcap() == 1) && (cscdetId.ring() == 1)) Endcap_1_Ring_1_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
	   if((cscdetId.endcap() == 1) && (cscdetId.ring() == 2)) Endcap_1_Ring_2_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
	   if((cscdetId.endcap() == 1) && (cscdetId.ring() == 3)) Endcap_1_Ring_3_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
	   if((cscdetId.endcap() == 1) && (cscdetId.ring() == 4)) Endcap_1_Ring_4_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());
	   if((cscdetId.endcap() == 2) && (cscdetId.ring() == 1)) Endcap_2_Ring_1_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
	   if((cscdetId.endcap() == 2) && (cscdetId.ring() == 2)) Endcap_2_Ring_2_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
	   if((cscdetId.endcap() == 2) && (cscdetId.ring() == 3)) Endcap_2_Ring_3_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
	   if((cscdetId.endcap() == 2) && (cscdetId.ring() == 4)) Endcap_2_Ring_4_XY_CSCHits_Muon->Fill(CSCGlobalPoint.x(), CSCGlobalPoint.y());          
	 }

     }// end CSC Sim Hits -------------------------------------------------------------

  }// End SimHits +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  
 
  for (auto &p : *particle){
    // if((p.pdgId()==13)||(p.pdgId()==-13)) cout<<endl<<" PDG Id = "<<p.pdgId()<<" Energy  = "<<p.energy()<<" Eta = "<<p.eta()<<" Phi = "<<p.phi()<<endl;
    if(p.pdgId()==2112) cout<<endl<<" PDG Id = "<<p.pdgId()<<" Energy  = "<<p.energy()<<" Eta = "<<p.eta()<<" Phi = "<<p.phi()<<endl;
  }


#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
   auto setup = iSetup.getData(setupToken_);
   auto pSetup = iSetup.getHandle(setupToken_);
#endif
}

// ------------ method called once each job just before starting event loop  ------------
void Simhits_Analyzer::beginJob() {
 
  edm::Service<TFileService> fs;
  // DT --------------------------------
  Z_DTHits_Muon = fs->make<TH1F>("Z_DTHits_Muon","Z_DTHits_Muon",2000,-1000, 1000); 
  XY_DTHits_Muon = fs->make<TH2F>("XY_DTHits_Muon","XY_DTHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  ZR_DTHits_Muon = fs->make<TH2F>("ZR_DTHits_Muon","ZR_DTHits_Muon",2000,-1000, 1000, 2000, 0, 1000); 
  Wheel_Minus2_XY_DTHits_Muon  = fs->make<TH2F>("Wheel_Minus2_XY_DTHits_Muon","Wheel_Minus2_XY_DTHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Wheel_Minus1_XY_DTHits_Muon  = fs->make<TH2F>("Wheel_Minus1_XY_DTHits_Muon","Wheel_Minus1_XY_DTHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Wheel_0_XY_DTHits_Muon  = fs->make<TH2F>("Wheel_0_XY_DTHits_Muon","Wheel_0_XY_DTHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Wheel_1_XY_DTHits_Muon  = fs->make<TH2F>("Wheel_1_XY_DTHits_Muon","Wheel_1_XY_DTHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Wheel_2_XY_DTHits_Muon  = fs->make<TH2F>("Wheel_2_XY_DTHits_Muon","Wheel_2_XY_DTHits_Muon",2000,-1000, 1000, 2000,-1000, 1000);

  Z_DTHits_AllParticles = fs->make<TH1F>("Z_DTHits_AllParticles","Z_DTHits_AllParticles",2000,-1000, 1000); 
  XY_DTHits_AllParticles = fs->make<TH2F>("XY_DTHits_AllParticles","XY_DTHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000);
  ZR_DTHits_AllParticles = fs->make<TH2F>("ZR_DTHits_AllPraticles","ZR_DTHits_AllParticles",2000,-1000, 1000, 2000, 0, 1000);  
  Wheel_Minus2_XY_DTHits_AllParticles  = fs->make<TH2F>("Wheel_Minus2_XY_DTHits_AllParticles","Wheel_Minus2_XY_DTHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Wheel_Minus1_XY_DTHits_AllParticles  = fs->make<TH2F>("Wheel_Minus1_XY_DTHits_AllParticles","Wheel_Minus1_XY_DTHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Wheel_0_XY_DTHits_AllParticles  = fs->make<TH2F>("Wheel_0_XY_DTHits_AllParticles","Wheel_0_XY_DTHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Wheel_1_XY_DTHits_AllParticles  = fs->make<TH2F>("Wheel_1_XY_DTHits_AllParticles","Wheel_1_XY_DTHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Wheel_2_XY_DTHits_AllParticles  = fs->make<TH2F>("Wheel_2_XY_DTHits_AllParticles","Wheel_2_XY_DTHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000);
  // RPC -------------------------------
  Z_RPCHits_Muon = fs->make<TH1F>("Z_RPCHits_Muon","Z_RPCHits_Muon",2400,-1200, 1200); 
  XY_RPCHits_Muon = fs->make<TH2F>("XY_RPCHits_Muon","XY_RPCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200); 
  ZR_RPCHits_Muon = fs->make<TH2F>("ZR_RPCHits_Muon","ZR_RPCHits_Muon",2400,-1200, 1200, 2400, 0, 1200); 
  Barrel_Wheel_Minus2_XY_RPCHits_Muon = fs->make<TH2F>("Barrel_Wheel_Minus2_XY_RPCHits_Muon","Barrel_Wheel_Minus2_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Barrel_Wheel_Minus1_XY_RPCHits_Muon = fs->make<TH2F>("Barrel_Wheel_Minus1_XY_RPCHits_Muon","Barrel_Wheel_Minus1_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Barrel_Wheel_0_XY_RPCHits_Muon = fs->make<TH2F>("Barrel_Wheel_0_XY_RPCHits_Muon","Barrel_Wheel_0_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Barrel_Wheel_1_XY_RPCHits_Muon = fs->make<TH2F>("Barrel_Wheel_1_XY_RPCHits_Muon","Barrel_Wheel_1_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Barrel_Wheel_2_XY_RPCHits_Muon = fs->make<TH2F>("Barrel_Wheel_2_XY_RPCHits_Muon","Barrel_Wheel_2_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_1_XY_RPCHits_Muon = fs->make<TH2F>("Endcap_1_XY_RPCHits_Muon","Endcap_1_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_1_Ring_1_XY_RPCHits_Muon = fs->make<TH2F>("Endcap_1_Ring_1_XY_RPCHits_Muon","Endcap_1_Ring_1_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_1_Ring_2_XY_RPCHits_Muon = fs->make<TH2F>("Endcap_1_Ring_2_XY_RPCHits_Muon","Endcap_1_Ring_2_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_1_Ring_3_XY_RPCHits_Muon = fs->make<TH2F>("Endcap_1_Ring_3_XY_RPCHits_Muon","Endcap_1_Ring_3_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000);
  Endcap_Minus1_XY_RPCHits_Muon = fs->make<TH2F>("Endcap_Minus1_XY_RPCHits_Muon","Endcap_Minus1_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000);  
  Endcap_Minus1_Ring_1_XY_RPCHits_Muon = fs->make<TH2F>("Endcap_Minus1_Ring_1_XY_RPCHits_Muon","Endcap_Minus1_Ring_1_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_Minus1_Ring_2_XY_RPCHits_Muon = fs->make<TH2F>("Endcap_Minus1_Ring_2_XY_RPCHits_Muon","Endcap_Minus1_Ring_2_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_Minus1_Ring_3_XY_RPCHits_Muon = fs->make<TH2F>("Endcap_Minus1_Ring_3_XY_RPCHits_Muon","Endcap_Minus1_Ring_3_XY_RPCHits_Muon",2000,-1000, 1000, 2000,-1000, 1000); 
 
  Z_RPCHits_AllParticles = fs->make<TH1F>("Z_RPCHits_AllParticles","Z_RPCHits_AllParticles",2400,-1200, 1200); 
  XY_RPCHits_AllParticles = fs->make<TH2F>("XY_RPCHits_AllParticles","XY_RPCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  ZR_RPCHits_AllParticles = fs->make<TH2F>("ZR_RPCHits_AllParticles","ZR_RPCHits_AllParticles",2400,-1200, 1200, 2400, 0, 1200);  
  Barrel_Wheel_Minus2_XY_RPCHits_AllParticles = fs->make<TH2F>("Barrel_Wheel_Minus2_XY_RPCHits_AllParticles","Barrel_Wheel_Minus2_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Barrel_Wheel_Minus1_XY_RPCHits_AllParticles = fs->make<TH2F>("Barrel_Wheel_Minus1_XY_RPCHits_AllParticles","Barrel_Wheel_Minus1_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Barrel_Wheel_0_XY_RPCHits_AllParticles = fs->make<TH2F>("Barrel_Wheel_0_XY_RPCHits_AllParticles","Barrel_Wheel_0_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Barrel_Wheel_1_XY_RPCHits_AllParticles = fs->make<TH2F>("Barrel_Wheel_1_XY_RPCHits_AllParticles","Barrel_Wheel_1_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Barrel_Wheel_2_XY_RPCHits_AllParticles = fs->make<TH2F>("Barrel_Wheel_2_XY_RPCHits_AllParticles","Barrel_Wheel_2_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000);
  Endcap_1_XY_RPCHits_AllParticles = fs->make<TH2F>("Endcap_1_XY_RPCHits_AllParticles","Endcap_1_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_1_Ring_1_XY_RPCHits_AllParticles = fs->make<TH2F>("Endcap_1_Ring_1_XY_RPCHits_AllParticles","Endcap_1_Ring_1_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_1_Ring_2_XY_RPCHits_AllParticles = fs->make<TH2F>("Endcap_1_Ring_2_XY_RPCHits_AllParticles","Endcap_1_Ring_2_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_1_Ring_3_XY_RPCHits_AllParticles = fs->make<TH2F>("Endcap_1_Ring_3_XY_RPCHits_AllParticles","Endcap_1_Ring_3_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000);
  Endcap_Minus1_XY_RPCHits_AllParticles = fs->make<TH2F>("Endcap_Minus1_XY_RPCHits_AllParticles","Endcap_Minus1_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000);  
  Endcap_Minus1_Ring_1_XY_RPCHits_AllParticles = fs->make<TH2F>("Endcap_Minus1_Ring_1_XY_RPCHits_AllParticles","Endcap_Minus1_Ring_1_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_Minus1_Ring_2_XY_RPCHits_AllParticles = fs->make<TH2F>("Endcap_Minus1_Ring_2_XY_RPCHits_AllParticles","Endcap_Minus1_Ring_2_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000); 
  Endcap_Minus1_Ring_3_XY_RPCHits_AllParticles = fs->make<TH2F>("Endcap_Minus1_Ring_3_XY_RPCHits_AllParticles","Endcap_Minus1_Ring_3_XY_RPCHits_AllParticles",2000,-1000, 1000, 2000,-1000, 1000);  

  // CSC
  Z_CSCHits_AllParticles  = fs->make<TH1F>("Z_CSCHits_AllParticles","Z_CSCHits_AllParticles",2400,-1200, 1200); 
  XY_CSCHits_AllParticles = fs->make<TH2F>("XY_CSCHits_AllParticles","XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  ZR_CSCHits_AllParticles = fs->make<TH2F>("ZR_CSCHits_AllParticles","ZR_CSCHits_AllParticles",2400,-1200, 1200, 2400, 0, 1200);  

  Endcap_1_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_1_XY_CSCHits_AllParticles","Endcap_1_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_2_XY_CSCHits_AllParticles","Endcap_2_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_1_Ring_1_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_1_Ring_1_XY_CSCHits_AllParticles","Endcap_1_Ring_1_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_1_Ring_2_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_1_Ring_2_XY_CSCHits_AllParticles","Endcap_1_Ring_2_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_1_Ring_3_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_1_Ring_3_XY_CSCHits_AllParticles","Endcap_1_Ring_3_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_1_Ring_4_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_1_Ring_4_XY_CSCHits_AllParticles","Endcap_1_Ring_4_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_Ring_1_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_2_Ring_1_XY_CSCHits_AllParticles","Endcap_2_Ring_1_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_Ring_2_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_2_Ring_2_XY_CSCHits_AllParticles","Endcap_2_Ring_2_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_Ring_3_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_2_Ring_3_XY_CSCHits_AllParticles","Endcap_2_Ring_4_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_Ring_4_XY_CSCHits_AllParticles = fs->make<TH2F>("Endcap_2_Ring_4_XY_CSCHits_AllParticles","Endcap_2_Ring_4_XY_CSCHits_AllParticles",2400,-1200, 1200, 2400,-1200, 1200);

  Z_CSCHits_Muon  = fs->make<TH1F>("Z_CSCHits_Muon","Z_CSCHits_Muon",2400,-1200, 1200); 
  XY_CSCHits_Muon = fs->make<TH2F>("XY_CSCHits_Muon","XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  ZR_CSCHits_Muon = fs->make<TH2F>("ZR_CSCHits_Muon","ZR_CSCHits_Muon",2400,-1200, 1200, 2400, 0, 1200);  

  Endcap_1_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_1_XY_CSCHits_Muon","Endcap_1_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_2_XY_CSCHits_Muon","Endcap_2_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_1_Ring_1_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_1_Ring_1_XY_CSCHits_Muon","Endcap_1_Ring_1_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_1_Ring_2_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_1_Ring_2_XY_CSCHits_Muon","Endcap_1_Ring_2_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_1_Ring_3_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_1_Ring_3_XY_CSCHits_Muon","Endcap_1_Ring_3_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_1_Ring_4_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_1_Ring_4_XY_CSCHits_Muon","Endcap_1_Ring_4_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_Ring_1_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_2_Ring_1_XY_CSCHits_Muon","Endcap_2_Ring_1_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_Ring_2_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_2_Ring_2_XY_CSCHits_Muon","Endcap_2_Ring_2_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_Ring_3_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_2_Ring_3_XY_CSCHits_Muon","Endcap_2_Ring_3_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);
  Endcap_2_Ring_4_XY_CSCHits_Muon = fs->make<TH2F>("Endcap_2_Ring_4_XY_CSCHits_Muon","Endcap_2_Ring_4_XY_CSCHits_Muon",2400,-1200, 1200, 2400,-1200, 1200);


}

// ------------ method called once each job just after ending the event loop  ------------
void Simhits_Analyzer::endJob() {
 
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void Simhits_Analyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
 
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

DEFINE_FWK_MODULE(Simhits_Analyzer);

